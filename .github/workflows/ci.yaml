name: safety-kayak-fishing-api-ci

on:
  push:
    branches:
      - main # main ブランチへのプッシュ時に実行
  pull_request:
    branches:
      - main # main ブランチへのプルリクエスト時に実行

jobs:
  ci:
    runs-on: ubuntu-latest # ジョブは最新のUbuntuランナー上で実行される
    env:
      RAILS_ENV: test # 環境変数RAILS_ENVをtestに設定
    services:
      db:
        image: postgres:13 # 使用するPostgreSQLのDockerイメージ
        env:
          POSTGRES_HOST: localhost # PostgreSQLのホスト名
          POSTGRES_USER: haga # PostgreSQLのユーザー名
          POSTGRES_PASSWORD: 1123haga # PostgreSQLのパスワード
          POSTGRES_DB: myapp_test # テスト用のデータベース名
        ports:
          - 5432:5432 # ホストとコンテナ間で5432ポートをマッピング
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2 # リポジトリのコードをチェックアウト

      # Docker Compose を使ってサービスをデタッチドモードで起動
      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      # Docker-compose ps でサービスの状態を確認
      - name: Check Docker Compose
        run: docker-compose ps

      # データベースマイグレーションを実行
      - name: Prepare database
        run: docker-compose exec -T app bundle exec rails db:migrate

      # RSpecを使ってテストを実行
      - name: Run tests
        run: |
          docker-compose exec -T app bundle exec rspec

      # サービスの状態を確認し、ログを出力する
      - name: Output Docker Compose logs
        if: failure() # ステップが失敗した後で実行
        run: docker-compose logs

      # すべてのサービスをシャットダウン
      - name: Shutdown
        run: docker-compose down
